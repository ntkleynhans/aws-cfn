AWSTemplateFormatVersion: '2010-09-09'

Description: A CloudFormation template that will deploy a loadbalancer

Parameters:

    VPC:
        Description: The VPC created by the Master CloudFormation template, where the test environment will be provisioned.
        Type: String

    SubnetA:
        Description: Subnet A created by the Master CloudFormation template, one of three which will be used by the test environment.
        Type: String
    
    SubnetB:
        Description: Subnet B created by the Master CloudFormation template, one of three which will be used by the test environment.
        Type: String
    
    SubnetC:
        Description: Subnet C created by the Master CloudFormation template, one of three which will be used by the test environment.
        Type: String

    SecurityGroup:
        Description: Security Group name
        Type: String

    CertificateArn:
        Description: SSL Certificate Arn
        Type: String

Conditions:

    HasNot: !Equals [ 'true', 'false' ]

Resources:

    NullResource:
        Type: 'Custom::NullResource'
        Condition: HasNot

    ApplicationLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Name: ALB
            Scheme: internet-facing
            Type: "application"
            SecurityGroups:
                - !Ref SecurityGroup
            Subnets:
                - !Ref SubnetA
                - !Ref SubnetB
                - !Ref SubnetC
            IpAddressType: "ipv4"

    HTTPSListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 443
            Protocol: "HTTPS"
            SslPolicy: "ELBSecurityPolicy-2016-08"
            Certificates: 
                - CertificateArn: !Ref CertificateArn
            DefaultActions: 
                - Order: 1
                - TargetGroupArn: !Ref TargetGroup
                - Type: "forward"

    HTTPListener:
        Type: "AWS::ElasticLoadBalancingV2::Listener"
        Properties:
            LoadBalancerArn: !Ref ApplicationLoadBalancer
            Port: 80
            Protocol: "HTTP"
            DefaultActions: 
              - 
                Order: 1
                RedirectConfig: 
                    Protocol: "HTTPS"
                    Port: "443"
                    Host: "#{host}"
                    Path: "/#{path}"
                    Query: "#{query}"
                    StatusCode: "HTTP_301"
                Type: "redirect"

    TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "instance"
            Matcher: 
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref VPC
            Name: "target-group-1"
            HealthCheckEnabled: true
            TargetGroupAttributes:
                - 
                    Key: "stickiness.enabled"
                    Value: "false"
                - 
                    Key: "deregistration_delay.timeout_seconds"
                    Value: "300"
                - 
                    Key: "stickiness.type"
                    Value: "lb_cookie"
                - 
                    Key: "stickiness.lb_cookie.duration_seconds"
                    Value: "86400"
                - 
                    Key: "slow_start.duration_seconds"
                    Value: "0"
                - 
                    Key: "load_balancing.algorithm.type"
                    Value: "round_robin"

Outputs:
    DNSName:
        Description: The DNS name of the Application Load Balancer that is used to gain access to the environment.
        Value: !GetAtt ApplicationLoadBalancer.DNSName

    ExportsStackName:
        Value: !Ref 'AWS::StackName'
        Export:
            Name: !Sub 'ExportsStackName-${AWS::StackName}'
